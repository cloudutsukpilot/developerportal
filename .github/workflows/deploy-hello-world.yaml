name: 'Deploy Hello World'

on:
  push:
    branches: [ main ]
    paths: 
      - .github/workflows/deploy-hello-world.yaml
      - environments/azure/**/apps/hello-world/**
  pull_request:
    branches: [ main ]
    paths: 
      - .github/workflows/deploy-hello-world.yaml
      - environments/azure/**/apps/hello-world/**
  # Allows you to run this workflow manually from the Actions tab 
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy'
        type: string
        default: 'dev'
  
env:
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_RESOURCE_GROUP: "dev-rg-backstage-01"
  AZURE_AKS_CLUSTER_NAME: "dev-aks-bg-01"
  DNS_RESOURCE_GROUP: "dev-rg-backstage-01"
  DOMIAN_NAME: "cloudutsuk.com"
  SUBDOMAIN_NAME: "hellok8"
  DOMAIN_API_KEY: ${{ secrets.GODADDY_API_KEY }}
  DOMAIN_API_SECRET: ${{ secrets.GODADDY_API_SECRET }}
  ENV: ${{ github.event.inputs.ENV || 'dev' }}

  
jobs:
  deploy-hello-world:
    name: Deploy Hello World
    runs-on: ubuntu-latest
    # needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: environments/azure/${{ env.ENV }}/apps/hello-world

    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2

    - name: Print ENV Value
      run: |
        echo "Environment is set to: ${{ env.ENV }}"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ env.AZURE_CLIENT_ID }}","clientSecret":"${{ env.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ env.AZURE_TENANT_ID }}"}'

    - name: Get AKS Credentials
      run: |
        set -e
        az aks get-credentials --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --name "${{ env.AZURE_AKS_CLUSTER_NAME }}"
        echo "AKS credentials successfully retrieved and context set."

    - name: Verify Kubeconfig Context
      run: |
        if [[ "$(kubectl config current-context)" == *"${{ env.AZURE_AKS_CLUSTER_NAME }}"* ]]; then
          echo "Kubeconfig context is set correctly to ${AZURE_AKS_CLUSTER_NAME}."
        else
          echo "Failed to set kubeconfig context to ${AZURE_AKS_CLUSTER_NAME}." >&2
          exit 1
        fi

    - name: Deploy Hello World
      if: ${{ success() }}
      run: |
        kubectl apply -f ./deployment.yaml
        kubectl apply -f ./service.yaml
        
    - name: Wait for LoadBalancer IP
      run: |
        echo "Waiting for the LoadBalancer IP to be assigned..."
        end=$((SECONDS+300))  # wait up to 5 minutes
        while [[ $SECONDS -lt $end ]]; do
          export HW_PUBLIC_IP=$(kubectl get svc hello-world-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$HW_PUBLIC_IP" ]]; then
            echo "Public IP assigned: $HW_PUBLIC_IP"
            echo "HW_PUBLIC_IP=$HW_PUBLIC_IP" >> $GITHUB_ENV
            break
          fi
          echo "Still waiting for the LoadBalancer IP..."
          sleep 10
        done
  
    - name: Update DNS Record
      if: ${{ success() }}
      run: |
        # Domain details
        DOMAIN="${{ env.DOMIAN_NAME}}"   
        SUBDOMAIN="${{ env.SUBDOMAIN_NAME}}"  
        IP_ADDRESS="${{ env.HW_PUBLIC_IP }}"    

        # Check if the A record already exists
        RECORD=$(curl -s -X GET \
          -H "Authorization: sso-key ${{ env.DOMAIN_API_KEY }}:${{ env.DOMAIN_API_SECRET }}" \
          "https://api.godaddy.com/v1/domains/${DOMAIN}/records/A/${SUBDOMAIN}" | jq -r '.[0].data')

        # If the record exists and matches the IP address, skip update
        if [[ "$RECORD" == "$IP_ADDRESS" ]]; then
          echo "A record for ${SUBDOMAIN}.${DOMAIN} already points to ${IP_ADDRESS}. No update needed."
        else
          # Add or update the A record
          RESPONSE=$(curl -s -X PUT \
            -H "Authorization: sso-key ${API_KEY}:${API_SECRET}" \
            -H "Content-Type: application/json" \
            -d "[{\"data\": \"${IP_ADDRESS}\", \"ttl\": 600}]" \
            "https://api.godaddy.com/v1/domains/${DOMAIN}/records/A/${SUBDOMAIN}")

          if [[ -z "$RESPONSE" ]]; then
            echo "A record for ${SUBDOMAIN}.${DOMAIN} successfully created/updated to point to ${IP_ADDRESS}."
          else
            echo "Failed to update A record: $RESPONSE"
          fi
        fi
