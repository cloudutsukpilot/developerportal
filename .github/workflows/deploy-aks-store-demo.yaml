name: 'Deploy AKS Store Demo'

on:
  push:
    branches: [ main ]
    paths: 
      - .github/workflows/deploy-aks-store-demo.yaml
      - environments/azure/**/apps/aks-store-demo/**
  pull_request:
    branches: [ main ]
    paths: 
      - .github/workflows/deploy-aks-store-demo.yaml
      - environments/azure/**/apps/aks-store-demo/**
  # Allows you to run this workflow manually from the Actions tab 
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy'
        type: string
        default: 'dev'
  
env:
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_RESOURCE_GROUP: "dev-rg-backstage-01"
  AZURE_AKS_CLUSTER_NAME: "dev-aks-bg-01"
  DNS_RESOURCE_GROUP: "dev-rg-domain-rg-01"
  DNS_ZONE_NAME: "cloudutsuk.com"
  DNS_RECORD_NAME: "aksstoredemo"
  ENV: ${{ github.event.inputs.ENV || 'dev' }}

  
jobs:
  deploy-aks-store-demo:
    name: Deploy AKS Store Demo
    runs-on: ubuntu-latest
    # needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: environments/azure/${{ env.ENV }}/apps/aks-store-demo

    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2

    - name: Print ENV Value
      run: |
        echo "Environment is set to: ${{ env.ENV }}"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ env.AZURE_CLIENT_ID }}","clientSecret":"${{ env.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ env.AZURE_TENANT_ID }}"}'

    - name: Get AKS Credentials
      run: |
        set -e
        az aks get-credentials --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --name "${{ env.AZURE_AKS_CLUSTER_NAME }}"
        echo "AKS credentials successfully retrieved and context set."

    - name: Verify Kubeconfig Context
      run: |
        if [[ "$(kubectl config current-context)" == *"${{ env.AZURE_AKS_CLUSTER_NAME }}"* ]]; then
          echo "Kubeconfig context is set correctly to ${AZURE_AKS_CLUSTER_NAME}."
        else
          echo "Failed to set kubeconfig context to ${AZURE_AKS_CLUSTER_NAME}." >&2
          exit 1
        fi

    - name: Deploy AKS Store Demo
      if: ${{ success() }}
      run: |
        kubectl apply -f ./aks-store-demo.yaml
        
    - name: Wait for LoadBalancer IP
      run: |
        echo "Waiting for the LoadBalancer IP to be assigned..."
        end=$((SECONDS+300))  # wait up to 5 minutes
        while [[ $SECONDS -lt $end ]]; do
          export PUBLIC_IP=$(kubectl get svc store-front -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$PUBLIC_IP" ]]; then
            echo "Public IP assigned: $PUBLIC_IP"
            echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
            break
          fi
          echo "Still waiting for the LoadBalancer IP..."
          sleep 10
        done
  
    - name: Update DNS Record
      if: ${{ success() }}
      run: |
        if [[ -n "${PUBLIC_IP}" ]]; then
          echo "Updating DNS record for ${DNS_RECORD_NAME}.${DNS_ZONE_NAME} to point to ${PUBLIC_IP}"
            if az network dns record-set a show --resource-group "${{ env.DNS_RESOURCE_GROUP }}" --zone-name "${{ env.DNS_ZONE_NAME }}" --name "${{ env.DNS_RECORD_NAME }}" &> /dev/null; then
              echo "DNS record-set ${DNS_RECORD_NAME} already exists. Updating the record."
              az network dns record-set a update \
                --resource-group "${{ env.DNS_RESOURCE_GROUP }}" \
                --zone-name "${{ env.DNS_ZONE_NAME }}" \
                --name "${{ env.DNS_RECORD_NAME }}" \
                --set ttl=300 \
                --output none

              az network dns record-set a add-record \
                --resource-group "${{ env.DNS_RESOURCE_GROUP }}" \
                --zone-name "${{ env.DNS_ZONE_NAME }}" \
                --record-set-name "${{ env.DNS_RECORD_NAME }}" \
                --ipv4-address "${PUBLIC_IP}" \
                --output none
            else
              echo "DNS record-set ${DNS_RECORD_NAME} does not exist. Creating the record-set."
                az network dns record-set a create \
                --resource-group "${{ env.DNS_RESOURCE_GROUP }}" \
                --zone-name "${{ env.DNS_ZONE_NAME }}" \
                --name "${{ env.DNS_RECORD_NAME }}" \
                --ttl 300 \
                --output none

                az network dns record-set a add-record \
                --resource-group "${{ env.DNS_RESOURCE_GROUP }}" \
                --zone-name "${{ env.DNS_ZONE_NAME }}" \
                --record-set-name "${{ env.DNS_RECORD_NAME }}" \
                --ipv4-address "${PUBLIC_IP}" \
                --output none
              echo "DNS record updated successfully."
            fi
        else
          echo "Error: PUBLIC_IP is not set. Unable to update DNS record." >&2
          exit 1
        fi
