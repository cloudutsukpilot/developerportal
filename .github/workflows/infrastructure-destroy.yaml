name: 'Destroy Azure Infrastructure'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab 
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to destroy'
        type: string
        default: 'dev'
  
env:
  STORAGE_ACCOUNT_NAME: cloudutsuktfstatestgacc
  RESOURCE_GROUP_NAME: terraform-backend
  RESOURCE_GROUP_LOCATION: centralindia
  CONTAINER_NAME: developer-portal
  TERRAGRUNT_VERSION: 0.68.4
  TERRAFORM_VERSION: v1.9.8
  WORKING_DIRECTORY: environments/azure/${{ github.event.inputs.ENV }}/resources
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ENV: ${{ github.event.inputs.ENV || 'dev' }}
  
jobs:
  initialize-azure-infra:
    name: Initialize Azure Infrastructure
    runs-on: ubuntu-latest
    environment: development
    # needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: environments/azure/${{ env.ENV }}/resources

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Repository Checkout
      uses: actions/checkout@v2
    
    # Install the latest version of Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: $TERRAFORM_VERSION

    # Install Terragrunt
    - name: Install Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    # Initialize the Terragrunt working directory
    - name: Terragrunt Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terragrunt run-all init

    # Destroy the infrastructure
    - name: Terragrunt Destroy
      id: destroy
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terragrunt run-all destroy -auto-approve --terragrunt-non-interactive

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ env.AZURE_CLIENT_ID }}","clientSecret":"${{ env.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ env.AZURE_TENANT_ID }}"}'

    - name: Delete Azure Storage Account created for Terraform Backend
      run: |
        az account set --subscription "$ARM_SUBSCRIPTION_ID"
        subscriptionName=$(az account show --query name -o tsv)
        echo "Subscription is set to: $subscriptionName"
        
        # Create storage account
        if [[ $(az storage account check-name --name $STORAGE_ACCOUNT_NAME --query 'nameAvailable') == true ]]; then
          az storage account create --name $STORAGE_ACCOUNT_NAME \
              --resource-group $RESOURCE_GROUP_NAME \
              --sku Standard_LRS \
              --encryption-services blob \
              --only-show-errors
          echo "Storage account $STORAGE_ACCOUNT_NAME created."
        else
          echo "Storage account $STORAGE_ACCOUNT_NAME already exists."
        fi
        
        # Create blob container
        if [[ $(az storage container exists --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --auth-mode login --query 'exists') == false ]]; then
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --auth-mode login \
          --only-show-errors
          echo "Blob container $CONTAINER_NAME created."
        else
          echo "Blob container $CONTAINER_NAME already exists."
        fi

        # Delete resource group
        if [[ $(az group exists --name $RESOURCE_GROUP_NAME) == false ]]; then
            az group delete --name $RESOURCE_GROUP_NAME --yes --no-wait \
          --only-show-errors
          echo "Resource group $RESOURCE_GROUP_NAME delete."
        else
          echo "Resource group $RESOURCE_GROUP_NAME does not exists."
        fi
      env:
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}